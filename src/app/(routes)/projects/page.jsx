"use client";
import React, { useEffect, useState } from "react";

const Page = () => {
  const [content, setContent] = useState([]);
  const [label, setLabel] = useState("");

  useEffect(() => {
    setContent(projects[0].subFolders[0].content);
    setLabel(projects[0].subFolders[0].name);
  }, []);
  const allProjects = [
    {
      link: "",
      name: "// _verbyo",
      img: "/verbyo.png",
      category: "react",
    },
    {
      link: "",
      name: "// _blackalgo",
      img: "/blackalgo.png",
      category: "next",
    },
    {
      link: "",
      name: "// _puryear",
      img: "/puryear.png",
      category: "next",
    },
    {
      link: "",
      name: "// _qoves",
      img: "/qoves.png",
      category: "react",
    },
    {
      link: "",
      name: "// _flowers",
      img: "/flowers.png",
      category: "react",
    }, {
      link: "",
      name: "// _metaverse-landing",
      img: "/metaverse.png",
      category: "next",
    }, {
      link: "",
      name: "// _youtube-lite",
      img: "/youtube.png",
      category: "react",
    }, {
      link: "",
      name: "// _bank-landing",
      img: "/bank.png",
      category: "html",
    }, {
      link: "",
      name: "// _webber",
      img: "/webber.png",
      category: "html",
    },
    {
      link: "",
      name: "// _charts",
      img: "/charts.png",
      category: "next",
    },
  ];
  const [projects, setProjects] = useState([
    {
      main: "projects",
      isopened: true,
      subFolders: [
        {
          name: "All",
          icon: (
            <svg
              width={23}
              height={18}
              viewBox="0 0 23 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M24.6357 7.54948V23.5495C24.6357 23.9031 24.5093 24.2422 24.2843 24.4923C24.0592 24.7423 23.754 24.8828 23.4357 24.8828H1.83574C1.51748 24.8828 1.21226 24.7423 0.987214 24.4923C0.76217 24.2422 0.635742 23.9031 0.635742 23.5495V6.21615H23.4357C23.754 6.21615 24.0592 6.35662 24.2843 6.60667C24.5093 6.85672 24.6357 7.19586 24.6357 7.54948ZM13.1325 3.54948H0.635742V2.21615C0.635742 1.86252 0.76217 1.52339 0.987214 1.27334C1.21226 1.02329 1.51748 0.882813 1.83574 0.882812H10.7325L13.1325 3.54948Z"
                fill="#607B96"
              />
            </svg>
          ),
          content: allProjects,
        },
        {
          name: "HTML",
          icon: (
            <svg
              width={23}
              height={23}
              viewBox="0 0 23 23"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g opacity="0.4" clipPath="url(#clip0_2823_876)">
                <path
                  d="M12.8115 18.3181L17.4315 17.0621L18.0545 10.2841H9.83752L9.63352 8.03014H18.2595L18.4865 5.81914H7.13652L7.77252 12.4971H15.5925L15.3315 15.3631L12.8115 16.0301L10.2915 15.3631L10.1335 13.5191H7.86352L8.19252 17.0631L12.8115 18.3181ZM3.81152 2.14014H21.8115L20.1885 20.1401L12.8115 22.1401L5.43452 20.1401L3.81152 2.14014Z"
                  fill="#607B96"
                />
              </g>
              <defs>
                <clipPath id="clip0_2823_876">
                  <rect
                    width={24}
                    height={24}
                    fill="white"
                    transform="translate(0.811523 0.140137)"
                  />
                </clipPath>
              </defs>
            </svg>
          ),
          content: allProjects.filter((i) => i.category == "html"),
        },
        {
          name: "React",
          icon: (
            <svg
              width={23}
              height={23}
              viewBox="0 0 23 23"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g clipPath="url(#clip0_2823_455)">
                <path
                  d="M12.8115 13.4999C12.4137 13.4999 12.0322 13.3419 11.7509 13.0606C11.4696 12.7793 11.3115 12.3978 11.3115 11.9999C11.3115 11.6021 11.4696 11.2206 11.7509 10.9393C12.0322 10.658 12.4137 10.4999 12.8115 10.4999C13.2093 10.4999 13.5909 10.658 13.8722 10.9393C14.1535 11.2206 14.3115 11.6021 14.3115 11.9999C14.3115 12.3978 14.1535 12.7793 13.8722 13.0606C13.5909 13.3419 13.2093 13.4999 12.8115 13.4999ZM12.2835 16.4939C12.4585 16.7039 12.6345 16.9079 12.8115 17.1029C12.9885 16.9079 13.1645 16.7049 13.3395 16.4939C12.9876 16.5014 12.6355 16.5014 12.2835 16.4939ZM10.2885 16.3689C9.52058 16.289 8.75772 16.1662 8.00352 16.0009C7.92852 16.3509 7.87152 16.6909 7.83352 17.0169C7.64352 18.5999 7.90852 19.5619 8.31152 19.7939C8.71452 20.0269 9.67952 19.7749 10.9565 18.8199C11.2195 18.6229 11.4845 18.4039 11.7505 18.1649C11.23 17.594 10.7419 16.9944 10.2885 16.3689ZM17.6195 16.0009C16.9025 16.1609 16.1365 16.2849 15.3345 16.3689C14.8811 16.9944 14.393 17.594 13.8725 18.1649C14.1385 18.4049 14.4035 18.6229 14.6665 18.8199C15.9435 19.7749 16.9085 20.0269 17.3115 19.7939C17.7145 19.5619 17.9785 18.5999 17.7905 17.0169C17.7492 16.6759 17.6925 16.3369 17.6205 16.0009H17.6195ZM19.0695 15.6139C19.6465 18.2529 19.3435 20.3539 18.0615 21.0939C16.7795 21.8339 14.8085 21.0459 12.8115 19.2269C10.8145 21.0459 8.84352 21.8329 7.56152 21.0929C6.27952 20.3529 5.97652 18.2529 6.55252 15.6129C3.97852 14.7939 2.31152 13.4799 2.31152 11.9999C2.31152 10.5199 3.97852 9.20693 6.55252 8.38593C5.97652 5.74693 6.27952 3.64593 7.56152 2.90593C8.84352 2.16593 10.8145 2.95393 12.8115 4.77293C14.8085 2.95393 16.7795 2.16693 18.0615 2.90693C19.3435 3.64693 19.6465 5.74693 19.0705 8.38693C21.6445 9.20593 23.3115 10.5199 23.3115 11.9999C23.3115 13.4799 21.6445 14.7929 19.0705 15.6139H19.0695ZM11.7495 5.83493C11.4952 5.60474 11.2306 5.38618 10.9565 5.17993C9.67952 4.22493 8.71452 3.97293 8.31152 4.20593C7.90852 4.43793 7.64452 5.39993 7.83252 6.98293C7.87252 7.30993 7.92852 7.64893 8.00252 7.99893C8.75705 7.83366 9.52025 7.7108 10.2885 7.63093C10.7635 6.97793 11.2535 6.37693 11.7505 5.83493H11.7495ZM15.3345 7.63093C16.1365 7.71493 16.9025 7.83993 17.6195 7.99893C17.6945 7.64893 17.7515 7.30893 17.7895 6.98293C17.9795 5.39993 17.7145 4.43793 17.3115 4.20593C16.9085 3.97293 15.9435 4.22493 14.6665 5.17993C14.3921 5.38616 14.1272 5.60471 13.8725 5.83493C14.3695 6.37693 14.8595 6.97793 15.3345 7.63093ZM13.3395 7.50593C13.1645 7.29593 12.9885 7.09193 12.8115 6.89693C12.6345 7.09193 12.4585 7.29493 12.2835 7.50593C12.6355 7.49846 12.9876 7.49846 13.3395 7.50593ZM9.18352 14.7039C9.00108 14.403 8.82504 14.0983 8.65552 13.7899C8.56052 14.0469 8.47252 14.2999 8.39252 14.5509C8.64952 14.6069 8.91352 14.6579 9.18252 14.7039H9.18352ZM11.1155 14.9379C12.2446 15.0218 13.3784 15.0218 14.5075 14.9379C15.1447 14.0019 15.7116 13.0199 16.2035 11.9999C15.7116 10.98 15.1447 9.99798 14.5075 9.06193C13.3784 8.97807 12.2446 8.97807 11.1155 9.06193C10.4783 9.99798 9.91143 10.98 9.41952 11.9999C9.91143 13.0199 10.4783 14.0019 11.1155 14.9379ZM16.9675 10.2099C17.0625 9.95293 17.1505 9.69993 17.2305 9.44893C16.9684 9.39204 16.705 9.34103 16.4405 9.29593C16.6226 9.59684 16.7983 9.90157 16.9675 10.2099ZM6.94152 9.83693C6.60152 9.94693 6.27952 10.0669 5.97752 10.1969C4.51252 10.8249 3.81152 11.5349 3.81152 11.9999C3.81152 12.4649 4.51152 13.1749 5.97752 13.8029C6.27952 13.9329 6.60152 14.0529 6.94152 14.1629C7.16352 13.4629 7.43852 12.7369 7.76652 11.9999C7.45135 11.2949 7.17592 10.5728 6.94152 9.83693ZM8.39152 9.44893C8.47252 9.69893 8.56052 9.95293 8.65552 10.2089C8.82505 9.9009 9.00109 9.5965 9.18352 9.29593C8.91352 9.34193 8.64952 9.39293 8.39252 9.44893H8.39152ZM18.6815 14.1629C19.0215 14.0529 19.3435 13.9329 19.6455 13.8029C21.1105 13.1749 21.8115 12.4649 21.8115 11.9999C21.8115 11.5349 21.1115 10.8249 19.6455 10.1969C19.3298 10.0624 19.0081 9.94231 18.6815 9.83693C18.4595 10.5369 18.1845 11.2629 17.8565 11.9999C18.1845 12.7369 18.4595 13.4619 18.6815 14.1629ZM17.2315 14.5509C17.1505 14.3009 17.0625 14.0469 16.9675 13.7909C16.798 14.099 16.622 14.4034 16.4395 14.7039C16.7095 14.6579 16.9735 14.6069 17.2305 14.5509H17.2315Z"
                  fill="#607B96"
                />
              </g>
              <defs>
                <clipPath id="clip0_2823_455">
                  <rect
                    width={24}
                    height={24}
                    fill="white"
                    transform="translate(0.811523)"
                  />
                </clipPath>
              </defs>
            </svg>
          ),

          content: allProjects.filter((i) => i.category == "react"),
        },
        {
          name: "Next",
          icon: (
            <svg
              width={23}
              height={23}
              viewBox="0 0 256 256"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
              xmlnsXlink="http://www.w3.org/1999/xlink"
              preserveAspectRatio="xMidYMid"
            >
              <g>
                <path
                  d="M119.616813,0.0688905149 C119.066276,0.118932037 117.314565,0.294077364 115.738025,0.419181169 C79.3775171,3.69690087 45.3192571,23.3131775 23.7481916,53.4631946 C11.7364614,70.2271045 4.05395894,89.2428829 1.15112414,109.384595 C0.12512219,116.415429 0,118.492153 0,128.025062 C0,137.557972 0.12512219,139.634696 1.15112414,146.665529 C8.10791789,194.730411 42.3163245,235.11392 88.7116325,250.076335 C97.0197458,252.753556 105.778299,254.580072 115.738025,255.680985 C119.616813,256.106338 136.383187,256.106338 140.261975,255.680985 C157.453763,253.779407 172.017986,249.525878 186.382014,242.194795 C188.584164,241.068861 189.00958,240.768612 188.709286,240.518404 C188.509091,240.36828 179.124927,227.782837 167.86393,212.570214 L147.393939,184.922273 L121.743891,146.965779 C107.630108,126.098464 96.0187683,109.034305 95.9186706,109.034305 C95.8185728,109.009284 95.7184751,125.873277 95.6684262,146.465363 C95.5933529,182.52028 95.5683284,183.971484 95.1178886,184.82219 C94.4672532,186.048207 93.9667644,186.548623 92.915738,187.099079 C92.114956,187.499411 91.4142717,187.574474 87.6355816,187.574474 L83.3063539,187.574474 L82.1552297,186.848872 C81.4044966,186.373477 80.8539589,185.747958 80.4785924,185.022356 L79.9530792,183.896422 L80.0031281,133.729796 L80.0782014,83.5381493 L80.8539589,82.5623397 C81.25435,82.0369037 82.1051808,81.3613431 82.7057674,81.0360732 C83.7317693,80.535658 84.1321603,80.4856165 88.4613881,80.4856165 C93.5663734,80.4856165 94.4172043,80.6857826 95.7434995,82.1369867 C96.1188661,82.5373189 110.007429,103.454675 126.623656,128.650581 C143.239883,153.846488 165.962072,188.250034 177.122972,205.139048 L197.392766,235.839522 L198.418768,235.163961 C207.502639,229.259062 217.112023,220.852086 224.719453,212.09482 C240.910264,193.504394 251.345455,170.835585 254.848876,146.665529 C255.874878,139.634696 256,137.557972 256,128.025062 C256,118.492153 255.874878,116.415429 254.848876,109.384595 C247.892082,61.3197135 213.683675,20.9362052 167.288368,5.97379012 C159.105376,3.32158945 150.396872,1.49507389 140.637341,0.394160408 C138.234995,0.143952798 121.693842,-0.131275573 119.616813,0.0688905149 L119.616813,0.0688905149 Z M172.017986,77.4831252 C173.219159,78.0836234 174.195112,79.2345784 174.545455,80.435575 C174.74565,81.0861148 174.795699,94.9976579 174.74565,126.348671 L174.670577,171.336 L166.73783,159.17591 L158.780059,147.01582 L158.780059,114.313685 C158.780059,93.1711423 158.880156,81.2862808 159.030303,80.7108033 C159.430694,79.3096407 160.306549,78.2087272 161.507722,77.5581875 C162.533724,77.0327515 162.909091,76.98271 166.837928,76.98271 C170.541544,76.98271 171.19218,77.0327515 172.017986,77.4831252 Z"
                  fill="#607B96"
                />
              </g>
            </svg>
          ),
          content: allProjects.filter((i) => i.category == "next"),
        },
      ],
    },
  ]);
  return (
    <div className="flex w-full min-h-[88.62vh] max-h-[88.62vh] ">
      <div className="max-w-[17.52%] w-full border-r border-[#1E2D3D] min-h-[calc(88.62vh_-_40.6px)]">
        {projects?.map((item, index) => (
          <div key={index + "contactMe"} className="overflow-hidden">
            <button
              onClick={() => {
                setProjects((prev) =>
                  prev.map((item, i) =>
                    i === index ? { ...item, isopened: !item.isopened } : item
                  )
                );
              }}
              className={`${
                item.isopened && "text-[#fff]"
              } flex gap-[11px] items-center border-b border-b-[#1E2D3D] pl-[14.5px] min-h-[40.6px] max-h-[40.6px] w-full`}
            >
              <svg
                className={`${!item.isopened && "rotate-[-90deg]"}`}
                width={9}
                height={7}
                viewBox="0 0 9 7"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M4.74998 6.65186L0.499969 0.651856L9 0.651855L4.74998 6.65186Z"
                  fill="white"
                />
              </svg>
              <p>{item.main}</p>
            </button>
            <div
              className={`${
                item.isopened ? "h-fit pt-[22px] pb-[27px]" : "h-0"
              } transition duration-500 ease-in-out px-[17px]  flex flex-col gap-[15px]`}
            >
              {item?.subFolders?.map((subItem, i) => (
                <button
                  onClick={() => setContent(subItem.content)}
                  key={i + "sub"}
                  className={`flex gap-[9px] items-center `}
                >
                  {subItem.icon}
                  <p title={subItem.name} className="truncate">
                    {subItem.name}
                  </p>
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
      <div className="max-w-[82.48%] w-full border-r border-[#1E2D3D] min-h-[88.62vh] max-h-[88.62vh] overflow-y-auto project">
        <div className="min-h-[40.6px] max-h-[40.6px] border-b border-[#1E2D3D] w-full ">
          <p className="px-[14.25px] min-h-[40.6px] max-h-[40.6px] w-fit flex items-center border-r border-[#1E2D3D]">
            _{label.toLowerCase()}
          </p>
        </div>
        <div className="flex justify-between min-h-[calc(88.62vh_-_40.6px)]">
          <div className="pt-[115px] pb-[50px] max-w-[1190px] w-full flex gap-[40px] flex-wrap mx-auto">
            {content?.map((item, index) => (
              <div
                key={index + "conte"}
                className="max-w-[370px] w-full flex flex-col gap-[15px]"
              >
                <p>
                  <span className="text-[#5565E8] font-bold">
                    Project {index + 1}
                  </span>{" "}
                  {item.name}
                </p>
                <div className="rounded-[15px] overflow-hidden border border-[#1E2D3D] ">
                  <img src={item.img} alt="" />
                  <div className="border-t border-[#1E2D3D] p-[31px] ">
                    <button className="max-w-[140px] min-h-[40px] max-h-[40px] w-full rounded-[8px] bg-[#1C2B3A] hover:text-[#fff] transition-all ease-in-out duration-300">
                      view-project
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="pl-[26px] border-l border-t-[10px] border-t-[#607B96] border-l-[#1E2D3D]" />
        </div>
      </div>
    </div>
  );
};

export default Page;
